package com.example.test.board.mybatis.controller;import com.example.test.aop.LoginType;import com.example.test.board.mybatis.dto.BoardDto;import com.example.test.board.mybatis.dto.FileDto;import com.example.test.board.mybatis.service.boardService;import com.example.test.board.mybatis.service.fileService;import com.example.test.category.mybatis.mapper.boardCategoryMapper;//import com.example.test.user.jpa.entity.Users;import com.example.test.user.mybatis.dto.UserDto;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.Pageable;import org.springframework.data.web.PageableDefault;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.multipart.MultipartHttpServletRequest;import javax.servlet.http.HttpSession;import java.util.ArrayList;import java.util.Collections;import java.util.List;@Controllerpublic class boardController {    List<Long> testList = new ArrayList<Long>();    @Autowired    boardService boardservice;    @Autowired    fileService fileservice;    /*@Autowired    fileRepository filerepository;*/    /*@Autowired    categoryRepository categoryrepository;*/    @Autowired    boardCategoryMapper boardcategorymapper;//   @Autowired//   commentService commentservice;    @RequestMapping("/board/boardTest")    public void test() throws Exception {        System.out.println("=================>");        System.out.println(boardservice.findByBoardIdx(84));    }    // 전체 목록    @LoginType    @RequestMapping(value = "/board/boardList/{boardName}", method = RequestMethod.GET)    public String boardList(Model model,                            @PageableDefault(size = 5) Pageable pageable            , @RequestParam(required = false, defaultValue = "") String searchText, @PathVariable(required = false) String boardName) throws Exception {        try {            System.out.println("===============================================>게시판" + boardName);            List<BoardDto> list = boardservice.findAll(searchText, searchText, boardName);            System.out.println(list);            model.addAttribute("boardName", boardName);            // 게시글 리스트 불러와서 페이징 처리            final int start = (int) pageable.getOffset();            final int end = Math.min((start + pageable.getPageSize()), list.size());            final Page<BoardDto> board = new PageImpl<>(list.subList(start, end), pageable, list.size());            System.out.println(board);            model.addAttribute("list", board);            model.addAttribute("listSize", list.size());            // 페이지 정보            int startPage = Math.max(1, board.getPageable().getPageNumber() - 5);            int endPage = Math.min(board.getTotalPages(), board.getPageable().getPageNumber() + 5);            model.addAttribute("startPage", startPage);            model.addAttribute("endPage", endPage);            model.addAttribute("page", pageable.getPageSize() * pageable.getPageNumber());            model.addAttribute("num", board.getTotalElements());        } catch (NullPointerException e) {            System.out.println("빈게시글");        }        return "board/boardList";    }    // 상세 조회    @LoginType    @RequestMapping(value = "/board/boardDetail/{boardName}/{boardIdx}", method = {RequestMethod.GET, RequestMethod.POST})    public String boardDetail(Model model, @PathVariable long boardIdx, @PathVariable String boardName, HttpSession session,                              @RequestParam(required = false) Long page, @RequestParam(required = false) String search) throws Exception {        System.out.println("---------------------------------------------" + boardName + boardIdx);        try {            // 세션에 담긴 유저 정보            UserDto users = (UserDto) session.getAttribute("LOGIN_MEMBER");            BoardDto board = boardservice.boardDetail(boardIdx);            model.addAttribute("username", users.getUsername());            model.addAttribute("board", board);            // 세션에 페이지 정보와 검색어 정보 담아놓기            session.setAttribute("bPage", page);            session.setAttribute("bSearchText", search);            session.setAttribute("boardName", boardName);            // 글 삭제 여부            if (board.getPBoardIdx() == 0) {                model.addAttribute("deleteYN", board.getDeleteYN());            } else {                model.addAttribute("deleteYN", boardservice.boardDetail(board.getPBoardIdx()).getDeleteYN());            }            // 부모 글이 존재하는지            if (board.getPBoardIdx() != 0) {                BoardDto boards = boardservice.boardDetail(board.getPBoardIdx());                model.addAttribute("boards", boards);                model.addAttribute("idx", board.getPBoardIdx());            } else {                model.addAttribute("idx", 0);            }            // 파일 목록            List<FileDto> fileList = fileservice.findAllByBoardIdx(boardIdx);            System.out.println(fileList);            model.addAttribute("fileList", fileList);            List<FileDto> PfileList = fileservice.findAllByBoardIdx(board.getPBoardIdx());            model.addAttribute("PfileList", PfileList);            return "board/boardDetail";        } catch (NullPointerException e) {            return "board/boardList";        }    }    // 글 작성    @LoginType    @RequestMapping(value = "/board/boardWrite", method = RequestMethod.POST)    public String boardWrite_(Model model, @RequestParam(required = false) Long idx, @RequestParam String boardName_) throws Exception {        // 새 글 인지 답변 글인지        if (idx == null) {            model.addAttribute("idx", 0);            System.out.println("========새글" + boardName_);            model.addAttribute("boardName", boardName_);            System.out.println("===========================================================================>새로운 글 작성");        } else {            BoardDto board = boardservice.boardDetail(idx);            model.addAttribute("board", board);            model.addAttribute("idx", idx);            System.out.println("========답글" + boardName_);            model.addAttribute("boardName", boardName_);            System.out.println("===========================================================================>답변 글 작성");        }        return "board/boardWrite";    }    @LoginType    @RequestMapping(value = "/board/boardInsert/{boardName}", method = RequestMethod.POST)    public String boardInsert(BoardDto board, HttpSession session, @RequestParam(required = false) Long pBoardIdx, @PathVariable String boardName,                              MultipartHttpServletRequest multipartHttpServletRequest, FileDto files) throws Exception {        System.out.println(boardName);        UserDto users = (UserDto) session.getAttribute("LOGIN_MEMBER");        board.setUsername(users.getUsername());        // 새 글 작성        if (pBoardIdx == null || pBoardIdx == 0) {            board.setGroupIdx(0);            // 최상위 글의 개수            List<Long> li = boardservice.selectGroupNum();            if (li.isEmpty()) {                board.setGroupNum(1);            } else {                board.setGroupNum(Collections.max(li) + 1);            }            board.setCategory(boardName);            board.setDepth(0);                                             // 새 글이기 때문에 깊이가 0            board.setPBoardIdx(0);            // 부모글이 없기 때문에 0        } else {                                                                  // 답변 글 작성            // 부모글에 연결된 자식글의 개수            List<Long> li_Idx = boardservice.findGroupIdx(pBoardIdx);            if (li_Idx.isEmpty()) {                board.setGroupIdx(1);            } else {                board.setGroupIdx(Collections.max(li_Idx) + 1);            }            board.setGroupNum(boardservice.findByBoardIdx(pBoardIdx).getGroupNum());  // 부모글과 같은 값            board.setDepth(boardservice.findByBoardIdx(pBoardIdx).getDepth() + 1);    // 답변글이기 때문에 깊이 +1            board.setPBoardIdx(pBoardIdx);                                               // 넘겨받은 부모글의 값            board.setCategory(boardName);            board.setTitle(setTitle(board.getTitle(), board.getDepth()));        }        boardservice.boardSave(board, 0, multipartHttpServletRequest, files);        boardcategorymapper.boardCountUpdate(boardName);        return "redirect:/board/boardList/{boardName}";    }    // 글 삭제    @LoginType    @RequestMapping(value = "/board/boardDelete/{boardName}/{boardIdx}", method = RequestMethod.GET)    public String boardDelete(@PathVariable long boardIdx, @PathVariable String boardName) throws Exception {        // 글에 연결된 파일 삭제        List<FileDto> fileList = fileservice.findAllByBoardIdx(boardIdx);        for (int i = 0; i < fileList.size(); i++) {            fileservice.deleteById(fileList.get(i).getIdx());        }        if (boardservice.findByBoardIdx(boardIdx).getDepth() == 0) {            boardservice.boardDelete(boardIdx, "");        } else {            boardservice.boardDelete(boardIdx, setNL(boardservice.findByBoardIdx(boardIdx).getDepth()));        }        return "redirect:/board/boardList/{boardName}";    }    // 글 수정    @LoginType    @RequestMapping(value = "/board/boardUpdate/{boardName}/{boardIdx}", method = RequestMethod.GET)    public String board(@PathVariable long boardIdx, Model model, @PathVariable String boardName) throws Exception {        try {            BoardDto board = boardservice.boardDetail(boardIdx);            model.addAttribute("board", board);            List<FileDto> fileList = fileservice.findAllByBoardIdx(boardIdx);            model.addAttribute("fileList", fileList);            model.addAttribute("title", getTitle(board.getTitle()));            model.addAttribute("boardName", boardName);            return "board/boardUpdate";        } catch (NullPointerException e) {            return "login/signIn";        }    }    @LoginType    @RequestMapping(value = "/board/boardUpdate/{boardName}/{boardIdx}", method = RequestMethod.POST)    public String boardUpdate(@PathVariable long boardIdx, @PathVariable String boardName, BoardDto board,                              MultipartHttpServletRequest multipartHttpServletRequest, FileDto files, HttpSession session, @RequestParam("fileLi") String fileLi) throws Exception {        if(fileLi.equals("") == false) {            System.out.println(fileLi);            String[] li = fileLi.split(",");            for (int i = 0; i < li.length; i++) {                long fileIdx = Long.parseLong(li[i]);                fileservice.deleteById(fileIdx);                boardservice.deleteFile(boardIdx);            }        }        UserDto users = (UserDto) session.getAttribute("LOGIN_MEMBER");        BoardDto boards = boardservice.boardDetail(boardIdx);        System.out.println(files);        if (boards.getUsername().equals(users.getUsername())) {      // 혹시라도 사용자가 본인이 아닐 경우 잘못 저장되지 않게            long hitCnt = board.getHitCnt();            board.setGroupNum(boards.getGroupNum());            board.setPBoardIdx(boards.getPBoardIdx());            board.setGroupIdx(boards.getGroupIdx());            board.setDepth(boards.getDepth());            board.setDeleteYN(boards.getDeleteYN());            board.setBoardIdx(boards.getBoardIdx());            board.setUsername(users.getUsername());            board.setFilesCount(boards.getFilesCount());            board.setCategory(boards.getCategory());            if (board.getDepth() == 0) {                board.setTitle(board.getTitle());            } else {                board.setTitle(setTitle(board.getTitle(), board.getDepth()));            }            boardservice.boardUpdate(board, hitCnt, multipartHttpServletRequest, files);        }        return "redirect:/board/boardDetail/{boardName}/{boardIdx}";    }//  commentController=======================================================================================================================================    // 댓글 등록//    @RequestMapping(value = "/board/boardDetail/comment/{boardIdx}", method = RequestMethod.POST)//    public String commentAdd(@PathVariable long boardIdx, Comments comments) {////        securityUser user = (securityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();//        comments.setBoardIdx(boardIdx);//        comments.setUsername(user.getUsername());//        System.out.println(comments.toString());//        commentservice.commentSave(comments);////        return "redirect:/board/boardDetail/{boardIdx}";//    }////    // 댓글 삭제//    @RequestMapping("/board/boardDetail/comment/{boardIdx}/{idx}")//    public String commentDelete(@PathVariable long boardIdx, @PathVariable long idx) {////        commentservice.commentDelete(idx);////        return "redirect:/board/boardDetail/{boardIdx}";//    }    public String getTitle(String title) {        String[] t = title.split(": ");        System.out.println(t[t.length - 1]);        return t[t.length - 1];    }    public String setTitle(String title, long num) {        String space = " ";        for (int i = 1; i < num; i++) {            space = "  " + space;        }        return space + "->Re : " + title;    }    public String setNL(long num) {        String space = " ";        for (int i = 1; i < num; i++) {            space = "  " + space;        }        return space + "->Re : ";    }}